
1. Run with seeds 1, 2, and 3, and compute whether each virtual ad- dress generated by the process is in or out of bounds. If in bounds, compute the translation.

ARG seed 1
ARG address space size 1k
ARG phys mem size 16k

Base-and-Bounds register information:

  Base   : 0x0000363c (decimal 13884)
  Limit  : 290

Virtual Address Trace
  VA  0: 0x0000030e (decimal:  782) --> SEGV
  VA  1: 0x00000105 (decimal:  261) --> 13884 + 261 = 14145 in hex: 0x3741
  VA  2: 0x000001fb (decimal:  507) --> SEGV
  VA  3: 0x000001cc (decimal:  460) --> SEGV
  VA  4: 0x0000029b (decimal:  667) --> SEGV
-------------------------------------------------------------------------

ARG seed 2
ARG address space size 1k
ARG phys mem size 16k

Base-and-Bounds register information:

  Base   : 0x00003ca9 (decimal 15529)
  Limit  : 500

Virtual Address Trace
  VA  0: 0x00000039 (decimal:   57) --> 15529 + 57 = 15586 in hex: 0x3ce2
  VA  1: 0x00000056 (decimal:   86) --> 15529 + 86 = 15615 in hex: 0x3cff
  VA  2: 0x00000357 (decimal:  855) --> SEGV
  VA  3: 0x000002f1 (decimal:  753) --> SEGV
  VA  4: 0x000002ad (decimal:  685) --> SEGV

------------------------------------------------------------------------
ARG seed 3
ARG address space size 1k
ARG phys mem size 16k

Base-and-Bounds register information:

  Base   : 0x000022d4 (decimal 8916)
  Limit  : 316

Virtual Address Trace
  VA  0: 0x0000017a (decimal:  378) --> SEGV
  VA  1: 0x0000026a (decimal:  618) --> SEGV
  VA  2: 0x00000280 (decimal:  640) --> SEGV
  VA  3: 0x00000043 (decimal:   67) --> 8916 + 67 = 8983 in hex: 0x2317
  VA  4: 0x0000000d (decimal:   13) --> 8916 + 13 = 8929 in hex: 0x22e1


2. Run with these flags: -s 0 -n 10. What value do you have set -l (the bounds register) to in order to ensure that all the generated virtual addresses are within bounds?

-s = seed
-n = number of v-adresses
-l = limit

ARG seed 0
ARG address space size 1k
ARG phys mem size 16k

Base-and-Bounds register information:

  Base   : 0x00003082 (decimal 12418)
  Limit  : 472

Virtual Address Trace
  VA  0: 0x000001ae (decimal:  430) --> PA or segmentation violation?
  VA  1: 0x00000109 (decimal:  265) --> PA or segmentation violation?
  VA  2: 0x0000020b (decimal:  523) --> PA or segmentation violation?
  VA  3: 0x0000019e (decimal:  414) --> PA or segmentation violation?
  VA  4: 0x00000322 (decimal:  802) --> PA or segmentation violation?
  VA  5: 0x00000136 (decimal:  310) --> PA or segmentation violation?
  VA  6: 0x000001e8 (decimal:  488) --> PA or segmentation violation?
  VA  7: 0x00000255 (decimal:  597) --> PA or segmentation violation?
  VA  8: 0x000003a1 (decimal:  929) --> PA or segmentation violation?
  VA  9: 0x00000204 (decimal:  516) --> PA or segmentation violation?

Since the biggest address is 929 we need to set the -l flag to 930 since the address needs to be smaller then the bounds



3. Run with these flags: -s 1 -n 10 -l 100. What is the maximum value that base can be set to, such that the address space still fits into physical memory in its entirety?


The maximum possible value would be 15899. The physical memory is 16kB, we need 100 byte for the memory and 1 byte since it is the limit and we can't write into the limit	


4. Run some of the same problems above, but with larger address spaces (-a) and physical memories (-p).
Done


5. What fraction of randomly-generated virtual addresses are valid, as a function of the value of the bounds register? Make a graph from running with different random seeds, with limit values rang- ing from 0 up to the maximum size of the address space.


Idk


